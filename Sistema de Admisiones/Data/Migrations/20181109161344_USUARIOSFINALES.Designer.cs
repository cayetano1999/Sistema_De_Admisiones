// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Sistema_de_Admisiones.Data;
using System;

namespace Sistema_de_Admisiones.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181109161344_USUARIOSFINALES")]
    partial class USUARIOSFINALES
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Apellido");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("ID_Usuario");

                    b.Property<string>("Imagen");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nombre");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Telefono");

                    b.Property<string>("Tipo_Usuario");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Aulas", b =>
                {
                    b.Property<string>("ID_Aula")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cupo");

                    b.Property<string>("Curso")
                        .IsRequired();

                    b.Property<string>("ID_Curso")
                        .IsRequired();

                    b.Property<string>("Nivel")
                        .IsRequired();

                    b.Property<string>("Nombre_Aula")
                        .IsRequired();

                    b.Property<string>("Ubicacion")
                        .IsRequired();

                    b.HasKey("ID_Aula");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Cursos", b =>
                {
                    b.Property<string>("ID_Curso")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nivel")
                        .IsRequired();

                    b.Property<string>("Nombre_Curso")
                        .IsRequired();

                    b.HasKey("ID_Curso");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Evaluaciones", b =>
                {
                    b.Property<int>("ID_Evaluacion")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Estado");

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("ID_Usuario");

                    b.Property<string>("Nombre_Evaluacion");

                    b.HasKey("ID_Evaluacion");

                    b.ToTable("Evaluaciones");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Nivel", b =>
                {
                    b.Property<int>("ID_Nivel")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre_Nivel")
                        .IsRequired();

                    b.HasKey("ID_Nivel");

                    b.ToTable("Nivel");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Notificaciones", b =>
                {
                    b.Property<int>("ID_Notificacion")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descripcion")
                        .IsRequired();

                    b.Property<string>("Estado")
                        .IsRequired();

                    b.Property<string>("Fecha");

                    b.Property<int>("ID_Usuario");

                    b.Property<string>("Titulo")
                        .IsRequired();

                    b.HasKey("ID_Notificacion");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Pagos", b =>
                {
                    b.Property<int>("ID_Pago")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cantidad");

                    b.Property<string>("Concepto")
                        .IsRequired();

                    b.Property<DateTime>("Fecha");

                    b.Property<int>("ID_Usuario");

                    b.Property<string>("Recibe")
                        .IsRequired();

                    b.Property<int>("Total");

                    b.Property<string>("Usuario")
                        .IsRequired();

                    b.HasKey("ID_Pago");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Periodo", b =>
                {
                    b.Property<int>("ID_Periodo")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Periodo_Escolar")
                        .IsRequired();

                    b.HasKey("ID_Periodo");

                    b.ToTable("Periodo");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.proceso", b =>
                {
                    b.Property<int>("ID_Poces")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Estado")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.HasKey("ID_Poces");

                    b.ToTable("proceso");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Procesos", b =>
                {
                    b.Property<int>("ID_Proceso")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Estado")
                        .IsRequired();

                    b.Property<int>("ID_Usuario");

                    b.Property<string>("Nombre_Proceso")
                        .IsRequired();

                    b.Property<int>("Porcentaje");

                    b.HasKey("ID_Proceso");

                    b.ToTable("Procesos");
                });

            modelBuilder.Entity("Sistema_de_Admisiones.Models.Solicitud_Admisiones", b =>
                {
                    b.Property<int>("ID_Solicitud")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Apellido")
                        .IsRequired();

                    b.Property<string>("Aula")
                        .IsRequired();

                    b.Property<string>("Centro_Procedencia")
                        .IsRequired();

                    b.Property<string>("Curso")
                        .IsRequired();

                    b.Property<string>("Direccion")
                        .IsRequired();

                    b.Property<int>("Edad");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Estado_Solicitud")
                        .IsRequired();

                    b.Property<string>("Fecha_Nacimiento")
                        .IsRequired();

                    b.Property<DateTime>("Fecha_Solicitud");

                    b.Property<int>("ID_Usuario");

                    b.Property<string>("Lugar_Nacimiento")
                        .IsRequired();

                    b.Property<string>("Nivel")
                        .IsRequired();

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("Nombre_Madre")
                        .IsRequired();

                    b.Property<string>("Nombre_Padre")
                        .IsRequired();

                    b.Property<string>("Periodo_Escolar")
                        .IsRequired();

                    b.Property<string>("Sexo")
                        .IsRequired();

                    b.Property<string>("Tanda")
                        .IsRequired();

                    b.Property<string>("Telefono")
                        .IsRequired();

                    b.Property<string>("Telefono_Padres")
                        .IsRequired();

                    b.Property<string>("URL_Acta_Nacimiento")
                        .IsRequired();

                    b.Property<string>("URL_Certificado_Medico")
                        .IsRequired();

                    b.Property<string>("URL_Foto")
                        .IsRequired();

                    b.Property<string>("URL_Record_Notas")
                        .IsRequired();

                    b.Property<string>("Usuario")
                        .IsRequired();

                    b.HasKey("ID_Solicitud");

                    b.ToTable("Solicitud_Admisiones");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Sistema_de_Admisiones.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Sistema_de_Admisiones.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sistema_de_Admisiones.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Sistema_de_Admisiones.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
